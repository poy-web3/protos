// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: ai_account.proto

package ai_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AIAccount_RegisterAccount_FullMethodName = "/AIAccount/RegisterAccount"
	AIAccount_RecoverAccount_FullMethodName  = "/AIAccount/RecoverAccount"
	AIAccount_RefreshToken_FullMethodName    = "/AIAccount/RefreshToken"
)

// AIAccountClient is the client API for AIAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIAccountClient interface {
	RegisterAccount(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RecoverAccount(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
}

type aIAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewAIAccountClient(cc grpc.ClientConnInterface) AIAccountClient {
	return &aIAccountClient{cc}
}

func (c *aIAccountClient) RegisterAccount(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AIAccount_RegisterAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAccountClient) RecoverAccount(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error) {
	out := new(RecoverResponse)
	err := c.cc.Invoke(ctx, AIAccount_RecoverAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAccountClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, AIAccount_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIAccountServer is the server API for AIAccount service.
// All implementations must embed UnimplementedAIAccountServer
// for forward compatibility
type AIAccountServer interface {
	RegisterAccount(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RecoverAccount(context.Context, *RecoverRequest) (*RecoverResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	mustEmbedUnimplementedAIAccountServer()
}

// UnimplementedAIAccountServer must be embedded to have forward compatible implementations.
type UnimplementedAIAccountServer struct {
}

func (UnimplementedAIAccountServer) RegisterAccount(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (UnimplementedAIAccountServer) RecoverAccount(context.Context, *RecoverRequest) (*RecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAccount not implemented")
}
func (UnimplementedAIAccountServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAIAccountServer) mustEmbedUnimplementedAIAccountServer() {}

// UnsafeAIAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIAccountServer will
// result in compilation errors.
type UnsafeAIAccountServer interface {
	mustEmbedUnimplementedAIAccountServer()
}

func RegisterAIAccountServer(s grpc.ServiceRegistrar, srv AIAccountServer) {
	s.RegisterService(&AIAccount_ServiceDesc, srv)
}

func _AIAccount_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAccountServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAccount_RegisterAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAccountServer).RegisterAccount(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAccount_RecoverAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAccountServer).RecoverAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAccount_RecoverAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAccountServer).RecoverAccount(ctx, req.(*RecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAccount_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAccountServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAccount_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAccountServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIAccount_ServiceDesc is the grpc.ServiceDesc for AIAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AIAccount",
	HandlerType: (*AIAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAccount",
			Handler:    _AIAccount_RegisterAccount_Handler,
		},
		{
			MethodName: "RecoverAccount",
			Handler:    _AIAccount_RecoverAccount_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AIAccount_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai_account.proto",
}
