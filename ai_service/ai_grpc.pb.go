// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: ai.proto

package ai_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AI_RegisterAccount_FullMethodName      = "/AI/RegisterAccount"
	AI_RecoverAccount_FullMethodName       = "/AI/RecoverAccount"
	AI_RefreshToken_FullMethodName         = "/AI/RefreshToken"
	AI_RegisterWithoutCheck_FullMethodName = "/AI/RegisterWithoutCheck"
	AI_RegisterRollBack_FullMethodName     = "/AI/RegisterRollBack"
)

// AIClient is the client API for AI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIClient interface {
	RegisterAccount(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RecoverAccount(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	RegisterWithoutCheck(ctx context.Context, in *RegisterWithoutCheckRequest, opts ...grpc.CallOption) (*RegisterWithoutCheckResponse, error)
	RegisterRollBack(ctx context.Context, in *RegisterRollbackRequest, opts ...grpc.CallOption) (*RegisterRollbackResponse, error)
}

type aIClient struct {
	cc grpc.ClientConnInterface
}

func NewAIClient(cc grpc.ClientConnInterface) AIClient {
	return &aIClient{cc}
}

func (c *aIClient) RegisterAccount(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AI_RegisterAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIClient) RecoverAccount(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*RecoverResponse, error) {
	out := new(RecoverResponse)
	err := c.cc.Invoke(ctx, AI_RecoverAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, AI_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIClient) RegisterWithoutCheck(ctx context.Context, in *RegisterWithoutCheckRequest, opts ...grpc.CallOption) (*RegisterWithoutCheckResponse, error) {
	out := new(RegisterWithoutCheckResponse)
	err := c.cc.Invoke(ctx, AI_RegisterWithoutCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIClient) RegisterRollBack(ctx context.Context, in *RegisterRollbackRequest, opts ...grpc.CallOption) (*RegisterRollbackResponse, error) {
	out := new(RegisterRollbackResponse)
	err := c.cc.Invoke(ctx, AI_RegisterRollBack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIServer is the server API for AI service.
// All implementations must embed UnimplementedAIServer
// for forward compatibility
type AIServer interface {
	RegisterAccount(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RecoverAccount(context.Context, *RecoverRequest) (*RecoverResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	RegisterWithoutCheck(context.Context, *RegisterWithoutCheckRequest) (*RegisterWithoutCheckResponse, error)
	RegisterRollBack(context.Context, *RegisterRollbackRequest) (*RegisterRollbackResponse, error)
	mustEmbedUnimplementedAIServer()
}

// UnimplementedAIServer must be embedded to have forward compatible implementations.
type UnimplementedAIServer struct {
}

func (UnimplementedAIServer) RegisterAccount(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (UnimplementedAIServer) RecoverAccount(context.Context, *RecoverRequest) (*RecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAccount not implemented")
}
func (UnimplementedAIServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAIServer) RegisterWithoutCheck(context.Context, *RegisterWithoutCheckRequest) (*RegisterWithoutCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWithoutCheck not implemented")
}
func (UnimplementedAIServer) RegisterRollBack(context.Context, *RegisterRollbackRequest) (*RegisterRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRollBack not implemented")
}
func (UnimplementedAIServer) mustEmbedUnimplementedAIServer() {}

// UnsafeAIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServer will
// result in compilation errors.
type UnsafeAIServer interface {
	mustEmbedUnimplementedAIServer()
}

func RegisterAIServer(s grpc.ServiceRegistrar, srv AIServer) {
	s.RegisterService(&AI_ServiceDesc, srv)
}

func _AI_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AI_RegisterAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).RegisterAccount(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AI_RecoverAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).RecoverAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AI_RecoverAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).RecoverAccount(ctx, req.(*RecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AI_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AI_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AI_RegisterWithoutCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWithoutCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).RegisterWithoutCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AI_RegisterWithoutCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).RegisterWithoutCheck(ctx, req.(*RegisterWithoutCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AI_RegisterRollBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServer).RegisterRollBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AI_RegisterRollBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServer).RegisterRollBack(ctx, req.(*RegisterRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AI_ServiceDesc is the grpc.ServiceDesc for AI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AI",
	HandlerType: (*AIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAccount",
			Handler:    _AI_RegisterAccount_Handler,
		},
		{
			MethodName: "RecoverAccount",
			Handler:    _AI_RecoverAccount_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AI_RefreshToken_Handler,
		},
		{
			MethodName: "RegisterWithoutCheck",
			Handler:    _AI_RegisterWithoutCheck_Handler,
		},
		{
			MethodName: "RegisterRollBack",
			Handler:    _AI_RegisterRollBack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai.proto",
}
