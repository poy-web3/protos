// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: bonus.proto

package bonus_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bonus_GetReferBonus_FullMethodName = "/Bonus/GetReferBonus"
)

// BonusClient is the client API for Bonus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BonusClient interface {
	GetReferBonus(ctx context.Context, in *ReferBonusRequest, opts ...grpc.CallOption) (*BonusResponse, error)
}

type bonusClient struct {
	cc grpc.ClientConnInterface
}

func NewBonusClient(cc grpc.ClientConnInterface) BonusClient {
	return &bonusClient{cc}
}

func (c *bonusClient) GetReferBonus(ctx context.Context, in *ReferBonusRequest, opts ...grpc.CallOption) (*BonusResponse, error) {
	out := new(BonusResponse)
	err := c.cc.Invoke(ctx, Bonus_GetReferBonus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BonusServer is the server API for Bonus service.
// All implementations must embed UnimplementedBonusServer
// for forward compatibility
type BonusServer interface {
	GetReferBonus(context.Context, *ReferBonusRequest) (*BonusResponse, error)
	mustEmbedUnimplementedBonusServer()
}

// UnimplementedBonusServer must be embedded to have forward compatible implementations.
type UnimplementedBonusServer struct {
}

func (UnimplementedBonusServer) GetReferBonus(context.Context, *ReferBonusRequest) (*BonusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferBonus not implemented")
}
func (UnimplementedBonusServer) mustEmbedUnimplementedBonusServer() {}

// UnsafeBonusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BonusServer will
// result in compilation errors.
type UnsafeBonusServer interface {
	mustEmbedUnimplementedBonusServer()
}

func RegisterBonusServer(s grpc.ServiceRegistrar, srv BonusServer) {
	s.RegisterService(&Bonus_ServiceDesc, srv)
}

func _Bonus_GetReferBonus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferBonusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonusServer).GetReferBonus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bonus_GetReferBonus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonusServer).GetReferBonus(ctx, req.(*ReferBonusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bonus_ServiceDesc is the grpc.ServiceDesc for Bonus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bonus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bonus",
	HandlerType: (*BonusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReferBonus",
			Handler:    _Bonus_GetReferBonus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bonus.proto",
}
