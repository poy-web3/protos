// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: notification.proto

package notification_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotificationService_SendEmailNotification_FullMethodName   = "/NotificationService/SendEmailNotification"
	NotificationService_SendIOSNotification_FullMethodName     = "/NotificationService/SendIOSNotification"
	NotificationService_SendAndroidNotification_FullMethodName = "/NotificationService/SendAndroidNotification"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	SendEmailNotification(ctx context.Context, in *EmailNotificationRequest, opts ...grpc.CallOption) (*EmailNotificationResponse, error)
	SendIOSNotification(ctx context.Context, in *IOSNotificationRequest, opts ...grpc.CallOption) (*IOSNotificationResponse, error)
	SendAndroidNotification(ctx context.Context, in *AndroidNotificationRequest, opts ...grpc.CallOption) (*AndroidNotificationResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendEmailNotification(ctx context.Context, in *EmailNotificationRequest, opts ...grpc.CallOption) (*EmailNotificationResponse, error) {
	out := new(EmailNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendEmailNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendIOSNotification(ctx context.Context, in *IOSNotificationRequest, opts ...grpc.CallOption) (*IOSNotificationResponse, error) {
	out := new(IOSNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendIOSNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendAndroidNotification(ctx context.Context, in *AndroidNotificationRequest, opts ...grpc.CallOption) (*AndroidNotificationResponse, error) {
	out := new(AndroidNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendAndroidNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	SendEmailNotification(context.Context, *EmailNotificationRequest) (*EmailNotificationResponse, error)
	SendIOSNotification(context.Context, *IOSNotificationRequest) (*IOSNotificationResponse, error)
	SendAndroidNotification(context.Context, *AndroidNotificationRequest) (*AndroidNotificationResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) SendEmailNotification(context.Context, *EmailNotificationRequest) (*EmailNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailNotification not implemented")
}
func (UnimplementedNotificationServiceServer) SendIOSNotification(context.Context, *IOSNotificationRequest) (*IOSNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIOSNotification not implemented")
}
func (UnimplementedNotificationServiceServer) SendAndroidNotification(context.Context, *AndroidNotificationRequest) (*AndroidNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAndroidNotification not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendEmailNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendEmailNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendEmailNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendEmailNotification(ctx, req.(*EmailNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendIOSNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IOSNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendIOSNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendIOSNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendIOSNotification(ctx, req.(*IOSNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendAndroidNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AndroidNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendAndroidNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendAndroidNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendAndroidNotification(ctx, req.(*AndroidNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmailNotification",
			Handler:    _NotificationService_SendEmailNotification_Handler,
		},
		{
			MethodName: "SendIOSNotification",
			Handler:    _NotificationService_SendIOSNotification_Handler,
		},
		{
			MethodName: "SendAndroidNotification",
			Handler:    _NotificationService_SendAndroidNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}
