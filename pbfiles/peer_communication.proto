syntax = "proto3";

option go_package = "github.com/poy-web3/peer_communication_service";

enum ERR_CODE_PEER_COMMUNICATION_SERVICE {
    CODE_NO_ERROR_PEER_COMMUNICATION_SERVICE = 0;
    CODE_ERR_MISSING_PARAM_PEER_COMMUNICATION_SERVICE = -1;
    CODE_ERR_INVALID_PARAM_PEER_COMMUNICATION_SERVICE = -2;
    CODE_ERR_UNKNOWN_PEER_COMMUNICATION_SERVICE = -1001;
}

message BlockHeightRequest {}

message BlockHeightResponse {
    CommonRspHeaderPeerCommunicationService header = 1;
    uint64 height = 2;
}

message GetRecentHeadersRequest {
    uint64 height = 1;
}

message GetRecentHeadersResponse {
    CommonRspHeaderPeerCommunicationService header = 1;
    bytes encoded_header_list = 2;
}

message ValidatorSetByHeightRequest {
    uint64 height = 1;
}

message ValidatorSetByHeightResponse {
    CommonRspHeaderPeerCommunicationService header = 1;
    bytes encoded_validator_list = 2;
}

message GetCoinOwnerRequest {
    bytes path = 1;
}

message GetCoinOwnerResponse {
    CommonRspHeaderPeerCommunicationService header = 1;
    bytes address_in_bytes = 2;
}

message SendTxRequest {
    bytes sender = 1;
    bytes receiver = 2;
    uint64 amount = 3;
    repeated bytes encoded_coins_list = 4;
}

message SendTxResponse {
    CommonRspHeaderPeerCommunicationService header = 1;
    bool status = 2;
}

message GetTxFromReadBufferRequest {}

message GetTxFromReadBufferResponse {
    CommonRspHeaderPeerCommunicationService header = 1;
    bytes encoded_tx_list = 2;
}

message CommonRspHeaderPeerCommunicationService {
    int32 ret = 1;
    string reason = 2;
}

service PeerCommunicationService {
    rpc BlockHeight(BlockHeightRequest) returns (BlockHeightResponse);
    rpc GetRecentHeaders(GetRecentHeadersRequest) returns (GetRecentHeadersResponse);
    rpc ValidatorSetByHeight(ValidatorSetByHeightRequest) returns (ValidatorSetByHeightResponse);
    rpc GetCoinOwner(GetCoinOwnerRequest) returns (GetCoinOwnerResponse);
    rpc GetTxFromReadBuffer(GetTxFromReadBufferRequest) returns (GetTxFromReadBufferResponse);
    rpc SendTx(SendTxRequest) returns (SendTxResponse);
}

// protoc --proto_path=. --go_out=../peer_communication_service --go_opt=paths=source_relative --go-grpc_out=../peer_communication_service --go-grpc_opt=paths=source_relative peer_communication.proto