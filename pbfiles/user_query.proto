syntax = "proto3";

option go_package = ".";

enum ERR_CODE_USER_QUERY_SERVICE {
    CODE_NO_ERROR_USER_QUERY_SERVICE = 0;
    CODE_ERR_MISSING_PARAM_USER_QUERY_SERVICE = -1;
    CODE_ERR_INVALID_PARAM_USER_QUERY_SERVICE = -2;
    CODE_ERR_UNKNOWN_USER_QUERY_SERVICE = -1001;
}

message CoinOwnershipRequest {
    bytes path = 1;
}

message GetRecentHeadersRequest {
    int64 height = 1;
}

message CoinOwnershipResponse {
    CommonRspHeaderUserQueryService header = 1;
    bytes address = 2;
}

message GetRecentHeadersResponse {
    CommonRspHeaderUserQueryService header = 1;
    bytes encded_header_list = 2;
}

message CommonRspHeaderUserQueryService {
    int32 ret = 1;
    string reason = 2;
}

service UserQueryService {
    rpc CoinOwnership(CoinOwnershipRequest) returns (CoinOwnershipResponse);
    rpc GetRecentHeaders(GetRecentHeadersRequest) returns (GetRecentHeadersResponse); 
}

// protoc --proto_path=. --go_out=../user_query_service --go_opt=paths=source_relative --go-grpc_out=../user_query_service --go-grpc_opt=paths=source_relative user_query.proto