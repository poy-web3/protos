// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: peer_communication.proto

package peer_communication_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PeerCommunication_GetBlockByHeight_FullMethodName    = "/PeerCommunication/GetBlockByHeight"
	PeerCommunication_SendTx_FullMethodName              = "/PeerCommunication/SendTx"
	PeerCommunication_GetTxFromReadBuffer_FullMethodName = "/PeerCommunication/GetTxFromReadBuffer"
	PeerCommunication_GenerateCoin_FullMethodName        = "/PeerCommunication/GenerateCoin"
)

// PeerCommunicationClient is the client API for PeerCommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerCommunicationClient interface {
	GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockByHeightResponse, error)
	SendTx(ctx context.Context, in *SendTxRequest, opts ...grpc.CallOption) (*SendTxResponse, error)
	GetTxFromReadBuffer(ctx context.Context, in *GetTxFromReadBufferRequest, opts ...grpc.CallOption) (*GetTxFromReadBufferResponse, error)
	GenerateCoin(ctx context.Context, in *GenerateCoinRequest, opts ...grpc.CallOption) (*GenerateCoinResponse, error)
}

type peerCommunicationClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerCommunicationClient(cc grpc.ClientConnInterface) PeerCommunicationClient {
	return &peerCommunicationClient{cc}
}

func (c *peerCommunicationClient) GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockByHeightResponse, error) {
	out := new(GetBlockByHeightResponse)
	err := c.cc.Invoke(ctx, PeerCommunication_GetBlockByHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationClient) SendTx(ctx context.Context, in *SendTxRequest, opts ...grpc.CallOption) (*SendTxResponse, error) {
	out := new(SendTxResponse)
	err := c.cc.Invoke(ctx, PeerCommunication_SendTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationClient) GetTxFromReadBuffer(ctx context.Context, in *GetTxFromReadBufferRequest, opts ...grpc.CallOption) (*GetTxFromReadBufferResponse, error) {
	out := new(GetTxFromReadBufferResponse)
	err := c.cc.Invoke(ctx, PeerCommunication_GetTxFromReadBuffer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationClient) GenerateCoin(ctx context.Context, in *GenerateCoinRequest, opts ...grpc.CallOption) (*GenerateCoinResponse, error) {
	out := new(GenerateCoinResponse)
	err := c.cc.Invoke(ctx, PeerCommunication_GenerateCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerCommunicationServer is the server API for PeerCommunication service.
// All implementations must embed UnimplementedPeerCommunicationServer
// for forward compatibility
type PeerCommunicationServer interface {
	GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockByHeightResponse, error)
	SendTx(context.Context, *SendTxRequest) (*SendTxResponse, error)
	GetTxFromReadBuffer(context.Context, *GetTxFromReadBufferRequest) (*GetTxFromReadBufferResponse, error)
	GenerateCoin(context.Context, *GenerateCoinRequest) (*GenerateCoinResponse, error)
	mustEmbedUnimplementedPeerCommunicationServer()
}

// UnimplementedPeerCommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedPeerCommunicationServer struct {
}

func (UnimplementedPeerCommunicationServer) GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}
func (UnimplementedPeerCommunicationServer) SendTx(context.Context, *SendTxRequest) (*SendTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTx not implemented")
}
func (UnimplementedPeerCommunicationServer) GetTxFromReadBuffer(context.Context, *GetTxFromReadBufferRequest) (*GetTxFromReadBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxFromReadBuffer not implemented")
}
func (UnimplementedPeerCommunicationServer) GenerateCoin(context.Context, *GenerateCoinRequest) (*GenerateCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCoin not implemented")
}
func (UnimplementedPeerCommunicationServer) mustEmbedUnimplementedPeerCommunicationServer() {}

// UnsafePeerCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerCommunicationServer will
// result in compilation errors.
type UnsafePeerCommunicationServer interface {
	mustEmbedUnimplementedPeerCommunicationServer()
}

func RegisterPeerCommunicationServer(s grpc.ServiceRegistrar, srv PeerCommunicationServer) {
	s.RegisterService(&PeerCommunication_ServiceDesc, srv)
}

func _PeerCommunication_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerCommunication_GetBlockByHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).GetBlockByHeight(ctx, req.(*GetBlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunication_SendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).SendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerCommunication_SendTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).SendTx(ctx, req.(*SendTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunication_GetTxFromReadBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxFromReadBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).GetTxFromReadBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerCommunication_GetTxFromReadBuffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).GetTxFromReadBuffer(ctx, req.(*GetTxFromReadBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunication_GenerateCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).GenerateCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerCommunication_GenerateCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).GenerateCoin(ctx, req.(*GenerateCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerCommunication_ServiceDesc is the grpc.ServiceDesc for PeerCommunication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerCommunication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PeerCommunication",
	HandlerType: (*PeerCommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockByHeight",
			Handler:    _PeerCommunication_GetBlockByHeight_Handler,
		},
		{
			MethodName: "SendTx",
			Handler:    _PeerCommunication_SendTx_Handler,
		},
		{
			MethodName: "GetTxFromReadBuffer",
			Handler:    _PeerCommunication_GetTxFromReadBuffer_Handler,
		},
		{
			MethodName: "GenerateCoin",
			Handler:    _PeerCommunication_GenerateCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer_communication.proto",
}
