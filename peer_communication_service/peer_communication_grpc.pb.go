// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: peer_communication.proto

package peer_communication_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeerCommunicationServiceClient is the client API for PeerCommunicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerCommunicationServiceClient interface {
	GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockByHeightResponse, error)
	SendTx(ctx context.Context, in *SendTxRequest, opts ...grpc.CallOption) (*SendTxResponse, error)
	GetTxFromReadBuffer(ctx context.Context, in *GetTxFromReadBufferRequest, opts ...grpc.CallOption) (*GetTxFromReadBufferResponse, error)
}

type peerCommunicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerCommunicationServiceClient(cc grpc.ClientConnInterface) PeerCommunicationServiceClient {
	return &peerCommunicationServiceClient{cc}
}

func (c *peerCommunicationServiceClient) GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*GetBlockByHeightResponse, error) {
	out := new(GetBlockByHeightResponse)
	err := c.cc.Invoke(ctx, "/PeerCommunicationService/GetBlockByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationServiceClient) SendTx(ctx context.Context, in *SendTxRequest, opts ...grpc.CallOption) (*SendTxResponse, error) {
	out := new(SendTxResponse)
	err := c.cc.Invoke(ctx, "/PeerCommunicationService/SendTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationServiceClient) GetTxFromReadBuffer(ctx context.Context, in *GetTxFromReadBufferRequest, opts ...grpc.CallOption) (*GetTxFromReadBufferResponse, error) {
	out := new(GetTxFromReadBufferResponse)
	err := c.cc.Invoke(ctx, "/PeerCommunicationService/GetTxFromReadBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerCommunicationServiceServer is the server API for PeerCommunicationService service.
// All implementations must embed UnimplementedPeerCommunicationServiceServer
// for forward compatibility
type PeerCommunicationServiceServer interface {
	GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockByHeightResponse, error)
	SendTx(context.Context, *SendTxRequest) (*SendTxResponse, error)
	GetTxFromReadBuffer(context.Context, *GetTxFromReadBufferRequest) (*GetTxFromReadBufferResponse, error)
	mustEmbedUnimplementedPeerCommunicationServiceServer()
}

// UnimplementedPeerCommunicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeerCommunicationServiceServer struct {
}

func (UnimplementedPeerCommunicationServiceServer) GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*GetBlockByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}
func (UnimplementedPeerCommunicationServiceServer) SendTx(context.Context, *SendTxRequest) (*SendTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTx not implemented")
}
func (UnimplementedPeerCommunicationServiceServer) GetTxFromReadBuffer(context.Context, *GetTxFromReadBufferRequest) (*GetTxFromReadBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxFromReadBuffer not implemented")
}
func (UnimplementedPeerCommunicationServiceServer) mustEmbedUnimplementedPeerCommunicationServiceServer() {
}

// UnsafePeerCommunicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerCommunicationServiceServer will
// result in compilation errors.
type UnsafePeerCommunicationServiceServer interface {
	mustEmbedUnimplementedPeerCommunicationServiceServer()
}

func RegisterPeerCommunicationServiceServer(s grpc.ServiceRegistrar, srv PeerCommunicationServiceServer) {
	s.RegisterService(&PeerCommunicationService_ServiceDesc, srv)
}

func _PeerCommunicationService_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServiceServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PeerCommunicationService/GetBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServiceServer).GetBlockByHeight(ctx, req.(*GetBlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunicationService_SendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServiceServer).SendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PeerCommunicationService/SendTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServiceServer).SendTx(ctx, req.(*SendTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunicationService_GetTxFromReadBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxFromReadBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServiceServer).GetTxFromReadBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PeerCommunicationService/GetTxFromReadBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServiceServer).GetTxFromReadBuffer(ctx, req.(*GetTxFromReadBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerCommunicationService_ServiceDesc is the grpc.ServiceDesc for PeerCommunicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerCommunicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PeerCommunicationService",
	HandlerType: (*PeerCommunicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockByHeight",
			Handler:    _PeerCommunicationService_GetBlockByHeight_Handler,
		},
		{
			MethodName: "SendTx",
			Handler:    _PeerCommunicationService_SendTx_Handler,
		},
		{
			MethodName: "GetTxFromReadBuffer",
			Handler:    _PeerCommunicationService_GetTxFromReadBuffer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer_communication.proto",
}
