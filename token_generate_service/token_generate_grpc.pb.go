// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: token_generate.proto

package token_generate_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokenGenerateService_GenerateToken_FullMethodName = "/TokenGenerateService/GenerateToken"
	TokenGenerateService_VerifyToken_FullMethodName   = "/TokenGenerateService/VerifyToken"
)

// TokenGenerateServiceClient is the client API for TokenGenerateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenGenerateServiceClient interface {
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error)
}

type tokenGenerateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenGenerateServiceClient(cc grpc.ClientConnInterface) TokenGenerateServiceClient {
	return &tokenGenerateServiceClient{cc}
}

func (c *tokenGenerateServiceClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, TokenGenerateService_GenerateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenGenerateServiceClient) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error) {
	out := new(VerifyTokenResponse)
	err := c.cc.Invoke(ctx, TokenGenerateService_VerifyToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenGenerateServiceServer is the server API for TokenGenerateService service.
// All implementations must embed UnimplementedTokenGenerateServiceServer
// for forward compatibility
type TokenGenerateServiceServer interface {
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error)
	mustEmbedUnimplementedTokenGenerateServiceServer()
}

// UnimplementedTokenGenerateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenGenerateServiceServer struct {
}

func (UnimplementedTokenGenerateServiceServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedTokenGenerateServiceServer) VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedTokenGenerateServiceServer) mustEmbedUnimplementedTokenGenerateServiceServer() {}

// UnsafeTokenGenerateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenGenerateServiceServer will
// result in compilation errors.
type UnsafeTokenGenerateServiceServer interface {
	mustEmbedUnimplementedTokenGenerateServiceServer()
}

func RegisterTokenGenerateServiceServer(s grpc.ServiceRegistrar, srv TokenGenerateServiceServer) {
	s.RegisterService(&TokenGenerateService_ServiceDesc, srv)
}

func _TokenGenerateService_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenGenerateServiceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenGenerateService_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenGenerateServiceServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenGenerateService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenGenerateServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenGenerateService_VerifyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenGenerateServiceServer).VerifyToken(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenGenerateService_ServiceDesc is the grpc.ServiceDesc for TokenGenerateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenGenerateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TokenGenerateService",
	HandlerType: (*TokenGenerateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateToken",
			Handler:    _TokenGenerateService_GenerateToken_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _TokenGenerateService_VerifyToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token_generate.proto",
}
